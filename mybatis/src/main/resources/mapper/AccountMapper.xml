<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.philcode.springboot.mybatis.mapper.AccountMapper">

    <resultMap id="BaseResultMap" type="com.philcode.springboot.mybatis.model.dao.Account">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="nickname" jdbcType="VARCHAR" property="nickname" />
        <result column="icon" jdbcType="VARCHAR" property="icon" />
        <result column="status" jdbcType="TINYINT" property="status" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    </resultMap>

    <resultMap id="AccountExtendMap" type="com.philcode.springboot.mybatis.model.dao.AccountExtend">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="username" jdbcType="VARCHAR" property="username" />
        <result column="nickname" jdbcType="VARCHAR" property="nickname" />
        <result column="icon" jdbcType="VARCHAR" property="icon" />
        <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
        <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
        <collection property="userProfile" ofType="com.philcode.springboot.mybatis.model.dao.UserProfile">
            <result column="uid" property="id"/>
            <result column="realname" property="realname"/>
            <result column="birtyday" property="birtyday"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>

    <insert id="insert" parameterType="com.philcode.springboot.mybatis.model.dao.Account" useGeneratedKeys="true" keyProperty="id">
        insert into account(`username`, `password`, `nickname`, `icon`, `status`, `created_at`, `updated_at`)
        values (#{username}, #{password}, #{nickname}, #{icon}, #{status}, #{createdAt}, #{updatedAt})
    </insert>

    <update id="updateIgnoreNullById">
        update account
        <set>
            <if test="account.username != null">username = #{account.username, jdbcType=VARCHAR},</if>
            <if test="account.password != null">password = #{account.password, jdbcType=VARCHAR},</if>
            <if test="account.nickname != null">nickname = #{account.nickname, jdbcType=VARCHAR},</if>
            <if test="account.icon != null">icon = #{account.icon, jdbcType=VARCHAR},</if>
            <if test="account.status != null">status = #{account.status, jdbcType=TINYINT},</if>
            <if test="account.updatedAt != null">updated_at = #{account.updatedAt, jdbcType=TIMESTAMP},</if>
        </set>
        where id = #{account.id, jdbcType=BIGINT}
    </update>

    <delete id="deleteById" parameterType="java.lang.Long">
        <!--delete from account where id = #{id}-->
        update account set status = 3 where id = #{id}
    </delete>

    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select * from account where id = #{id}
    </select>

    <select id="findAll" resultMap="BaseResultMap">
        select * from account
    </select>

    <select id="findWithUserProfileById" parameterType="java.lang.Long" resultMap="AccountExtendMap">
        select
          a.id as id,
          a.username as username,
          a.nickname as nickname,
          a.icon as icon,
          u.id as uid,
          u.realname as realname,
          u.birtyday as birtyday,
          u.gender as gender
        from account as a left join user_profile as u on a.id = u.account_id
        where a.id = #{id}
    </select>

</mapper>